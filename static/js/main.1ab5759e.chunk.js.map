{"version":3,"sources":["contexts/timer.ts","contexts/guild.ts","contexts/is-my-guild.ts","components/guild.tsx","components/is-my-guild.tsx","components/timer.tsx","components/summery.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultContext","timer","updateTimer","timerContext","createContext","prayed","updatePrayed","guildContext","useGuild","useState","setPrayed","useCallback","current","myGuild","updateMyGuild","myGuildContext","Guild","minute","name","cardStyle","seedList","classes","makeStyles","theme","createStyles","card","backgroundColor","color","padding","spacing","useStyles","filterOptions","createFilterOptions","stringify","option","hiragana","replace","match","chr","charCodeAt","String","fromCharCode","ctx","useContext","initialModified","modified","setModified","seed","setSeed","hp","setHp","useEffect","seedHp","Math","round","toLocaleString","Card","className","CardContent","Autocomplete","options","getOptionLabel","getOptionSelected","value","autoSelect","onChange","e","renderInput","params","TextField","label","variant","margin","target","fullWidth","RadioY","withStyles","root","yellow","checked","props","Radio","RadioR","red","RadioB","blue","RadioG","green","MyGuild","setValue","FormControl","component","FormLabel","style","RadioGroup","row","aria-label","FormControlLabel","control","Timer","dateDiff","setDateDiff","nowDate","Date","getTime","jsonUrl","floor","random","fetch","then","response","json","data","st","it","dateNow","setDateNow","timerId","setInterval","moment","format","clearInterval","borderColor","text","SummeryText","InputLabelProps","InputProps","app","appHeader","display","flexDirection","alignItems","justifyContent","fontSize","appMain","minHeight","container","flexGrow","guildStyles","guildY","brown","guildR","gate","grey","guildB","guildG","App","timeCtx","setTimer","useTimer","guildYCtx","guildRCtx","gateCtx","guildBCtx","guildGCtx","myGuildCtx","setMyGuild","useMyGuild","summery","setSummery","sumText","Container","Provider","Grid","item","xs","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ab5759e.chunk.js","sourcesContent":["import { createContext, useCallback, useState } from 'react';\n\ntype TimerContext = {\n  timer: string;\n  updateTimer: (time: string) => void;\n};\n\nconst defaultContext: TimerContext = {\n  timer: '',\n  updateTimer: () => {},\n};\n\nexport const timerContext = createContext<TimerContext>(defaultContext);\n\nexport const useTimer = (): TimerContext => {\n  const [timer, setTimer] = useState(defaultContext.timer);\n  const updateTimer = useCallback((current: string): void => {\n    setTimer(current);\n  }, []);\n  return { timer, updateTimer };\n};\n","import { createContext, useCallback, useState } from 'react';\n\ntype GuildContext = {\n  prayed: string;\n  updatePrayed: (prayed: string) => void;\n};\n\nconst defaultContext: GuildContext = {\n  prayed: '0%',\n  updatePrayed: () => {},\n};\n\nexport const guildContext = createContext<GuildContext>(defaultContext);\n\nexport const useGuild = (): GuildContext => {\n  const [prayed, setPrayed] = useState(defaultContext.prayed);\n  const updatePrayed = useCallback((current: string): void => {\n    setPrayed(current);\n  }, []);\n  return { prayed, updatePrayed };\n};\n","import { createContext, useCallback, useState } from 'react';\n\ntype MyGuildContext = {\n  myGuild: string;\n  updateMyGuild: (guild: string) => void;\n};\n\nconst defaultContext: MyGuildContext = {\n  myGuild: '',\n  updateMyGuild: () => {},\n};\n\nexport const myGuildContext = createContext<MyGuildContext>(defaultContext);\n\nexport const useMyGuild = (): MyGuildContext => {\n  const [myGuild, setMyGuild] = useState(defaultContext.myGuild);\n  const updateMyGuild = useCallback((current: string): void => {\n    setMyGuild(current);\n  }, []);\n  return { myGuild, updateMyGuild };\n};\n","import React, { useEffect, useState, useContext } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, {\n  createFilterOptions,\n} from '@material-ui/lab/Autocomplete';\nimport { Seed } from '../App';\nimport { guildContext } from '../contexts/guild';\n\ntype GuildProps = {\n  minute: string;\n  name: string;\n  cardStyle: {\n    backgroundColor: string;\n    color: string;\n  };\n  seedList: Seed[] | null;\n};\n\nconst Guild = ({ minute, name, cardStyle, seedList }: GuildProps) => {\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      card: {\n        backgroundColor: cardStyle.backgroundColor,\n        color: cardStyle.color,\n        padding: theme.spacing(2),\n      },\n    })\n  );\n  const classes = useStyles();\n\n  const filterOptions = createFilterOptions({\n    stringify: (option: Seed) => {\n      const hiragana = option.name.replace(/[\\u30a1-\\u30f6]/g, (match) => {\n        const chr = match.charCodeAt(0) - 0x60;\n        return String.fromCharCode(chr);\n      });\n      return `${option.name}_${hiragana}`;\n    },\n  });\n  /**\n   * 祈り値等を入れるcontext\n   */\n  const ctx = useContext(guildContext);\n  /**\n   * 入力時の経過時間modified\n   * TODO setModifiedは祈り値が更新されたときのみ走らせる\n   */\n  const initialModified = minute;\n  const [modified, setModified] = useState(initialModified);\n  /**\n   * 選択されたseed\n   */\n  const [seed, setSeed] = useState<Seed | null>(null);\n  const handleSeedChange = (e: React.ChangeEvent<{}>, value: Seed | null) => {\n    setSeed(value);\n    setModified(minute);\n  };\n  /**\n   * 入力された体力hp\n   */\n  const [hp, setHp] = useState(0);\n  const handleHpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // 「+''」は0なのでnumberで返るぞ\n    setHp(+e.target.value);\n    setModified(minute);\n  };\n  /**\n   * 祈りprayed\n   */\n  useEffect(() => {\n    if (!seed) return;\n    if (!hp) return;\n    const seedHp = seed.hp;\n    const prayed = Math.round((hp / seedHp - 1) * 100);\n    if (prayed < 0) ctx.updatePrayed(`0%(${modified})`);\n    else ctx.updatePrayed(`${prayed.toLocaleString()}%(${modified})`);\n  }, [seed, hp, ctx, modified]);\n\n  return (\n    <div>\n      <Card className={classes.card}>\n        <CardContent>\n          {name}: {ctx.prayed}\n          {seedList ? (\n            <Autocomplete\n              options={seedList}\n              getOptionLabel={(option) => option.name}\n              getOptionSelected={(option, value) => option.name === value.name}\n              filterOptions={filterOptions}\n              autoSelect={true}\n              onChange={handleSeedChange}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"シード名\"\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                />\n              )}\n            />\n          ) : (\n            <div>\n              <p>シード情報を読み込み中</p>\n            </div>\n          )}\n          <TextField\n            label=\"モンスターの体力\"\n            onChange={handleHpChange}\n            fullWidth={true}\n            variant=\"outlined\"\n            margin=\"dense\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Guild;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { yellow, red, blue, green } from '@material-ui/core/colors';\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { myGuildContext } from '../contexts/is-my-guild';\n\nconst RadioY = withStyles({\n  root: { color: yellow[400], '&$checked': { color: yellow[600] } },\n  checked: {},\n})((props: RadioProps) => <Radio {...props} />);\n\nconst RadioR = withStyles({\n  root: { color: red[400], '&$checked': { color: red[600] } },\n  checked: {},\n})((props: RadioProps) => <Radio {...props} />);\n\nconst RadioB = withStyles({\n  root: { color: blue[400], '&$checked': { color: blue[600] } },\n  checked: {},\n})((props: RadioProps) => <Radio {...props} />);\n\nconst RadioG = withStyles({\n  root: { color: green[400], '&$checked': { color: green[600] } },\n  checked: {},\n})((props: RadioProps) => <Radio {...props} />);\n\nconst MyGuild = () => {\n  const ctx = useContext(myGuildContext);\n  const [value, setValue] = useState('');\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n    ctx.updateMyGuild(value);\n  };\n  useEffect(() => {\n    ctx.updateMyGuild(value);\n  }, [ctx, value]);\n\n  return (\n    <div>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" style={{ color: 'white' }}>\n          自分のギルド\n        </FormLabel>\n        <RadioGroup\n          row={true}\n          aria-label=\"my-guild\"\n          name=\"my-guild\"\n          value={value}\n          onChange={handleChange}\n        >\n          <FormControlLabel\n            value=\"yellow\"\n            control={<RadioY />}\n            label=\"左上(黄)\"\n          />\n          <FormControlLabel value=\"red\" control={<RadioR />} label=\"右上(赤)\" />\n          <FormControlLabel\n            value=\"blue\"\n            control={<RadioB />}\n            label=\"左下(青)\"\n          />\n          <FormControlLabel\n            value=\"green\"\n            control={<RadioG />}\n            label=\"右下(緑)\"\n          />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default MyGuild;\n","import React, { useState, useEffect, useContext } from 'react';\nimport moment from 'moment';\nimport { timerContext } from '../contexts/timer';\n\nconst Timer = () => {\n  const ctx = useContext(timerContext);\n  /**\n   * 端末とサーバーの時刻の差分dateDiff\n   */\n  const [dateDiff, setDateDiff] = useState(0);\n  useEffect(() => {\n    const nowDate = new Date().getTime();\n    // ランダムなどちらかのサーバurl\n    const jsonUrl = [\n      'https://ntp-a1.nict.go.jp/cgi-bin/json',\n      'https://ntp-b1.nict.go.jp/cgi-bin/json',\n    ][Math.floor(Math.random() * 2)];\n    fetch(`${jsonUrl}?${nowDate / 1000}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setDateDiff(data.st * 1000 + (nowDate - data.it * 1000) / 2 - nowDate);\n      });\n  }, []);\n\n  /**\n   * dateDiffをtimeに反映\n   */\n  const [dateNow, setDateNow] = useState('');\n  useEffect(() => {\n    const timerId = setInterval(\n      () =>\n        setDateNow(\n          moment(new Date().getTime() + dateDiff).format('HH時 mm分 ss.SS秒')\n        ),\n      10\n    );\n    return () => clearInterval(timerId);\n  }, [dateDiff]);\n\n  /**\n   * ctxに送る\n   */\n  useEffect(() => {\n    const minute = dateNow.match(/\\d{2}分/g);\n    ctx.updateTimer(minute ? minute[0] : '');\n  }, [ctx, dateNow]);\n\n  return (\n    <div>\n      <p>現在時刻: {dateNow}</p>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\ntype Summery = {\n  value: string;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: 'white',\n    },\n    text: {\n      borderColor: 'white',\n      color: 'white',\n    },\n  })\n);\n\nconst SummeryText = ({ value }: Summery) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <TextField\n        className={classes.root}\n        InputLabelProps={{ className: classes.text }}\n        label=\"コピペ用\"\n        fullWidth={true}\n        variant=\"outlined\"\n        margin=\"dense\"\n        InputProps={{ className: classes.text }}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default SummeryText;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  yellow,\n  brown,\n  red,\n  grey,\n  blue,\n  green,\n} from '@material-ui/core/colors';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport { timerContext, useTimer } from './contexts/timer';\nimport { guildContext, useGuild } from './contexts/guild';\nimport { myGuildContext, useMyGuild } from './contexts/is-my-guild';\nimport Guild from './components/guild';\nimport MyGuild from './components/is-my-guild';\nimport Timer from './components/timer';\nimport SummeryText from './components/summery';\n\nexport type Seed = {\n  name: string;\n  link: string;\n  img: string;\n  elem: string;\n  hp: number;\n  interval: number;\n  reach: number;\n  range: number;\n  targets: number;\n  times: number;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    app: {\n      backgroundColor: '#282c34',\n      color: 'white',\n    },\n    appHeader: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: 'calc(10px + 2vmin)',\n    },\n    appMain: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      fontSize: 'calc(10px + 2vmin)',\n    },\n    container: { flexGrow: 1 },\n    text: { color: 'white' },\n  })\n);\n\nconst guildStyles = {\n  guildY: {\n    backgroundColor: yellow[100],\n    color: brown[600],\n  },\n  guildR: {\n    backgroundColor: red[100],\n    color: red[900],\n  },\n  gate: {\n    backgroundColor: grey[200],\n    color: grey[900],\n  },\n  guildB: {\n    backgroundColor: blue[100],\n    color: blue[900],\n  },\n  guildG: {\n    backgroundColor: green[100],\n    color: green[900],\n  },\n};\n\nconst App = () => {\n  const classes = useStyles();\n  /**\n   * シード情報seed\n   */\n  const [seed, setSeed] = useState<Seed[] | null>(null);\n  useEffect(() => {\n    fetch(\n      'https://script.google.com/macros/s/AKfycbyt5WB_eEoamADwxePfKQxk3umq5khBbCeaIdRnLOTCeVHzkj0/exec'\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        const seeds = data as Seed[];\n        setSeed(seeds);\n      });\n  }, []);\n  /**\n   * contextになっているtime\n   */\n  const timeCtx = useTimer();\n\n  /**\n   * contextになっているギルドの祈り値\n   */\n  const guildYCtx = useGuild();\n  const guildRCtx = useGuild();\n  const gateCtx = useGuild();\n  const guildBCtx = useGuild();\n  const guildGCtx = useGuild();\n  /**\n   * contextになっている自ギルト\n   */\n  const myGuildCtx = useMyGuild();\n\n  /**\n   * 祈り値まとめ\n   */\n  const [summery, setSummery] = useState('');\n  useEffect(() => {\n    const guildY =\n      myGuildCtx.myGuild !== 'yellow' ? `左上(黄):${guildYCtx.prayed} ` : '';\n    const guildR =\n      myGuildCtx.myGuild !== 'red' ? `右上(赤):${guildRCtx.prayed} ` : '';\n    const gate = `ゲート(門):${gateCtx.prayed} `;\n    const guildB =\n      myGuildCtx.myGuild !== 'blue' ? `左下(青):${guildBCtx.prayed} ` : '';\n    const guildG =\n      myGuildCtx.myGuild !== 'green' ? `右下(緑):${guildGCtx.prayed}` : '';\n    const sumText = `${guildY}${guildR}${gate}${guildB}${guildG}`;\n    setSummery(sumText);\n  }, [\n    gateCtx.prayed,\n    guildBCtx.prayed,\n    guildGCtx.prayed,\n    guildRCtx.prayed,\n    guildYCtx.prayed,\n    myGuildCtx.myGuild,\n  ]);\n\n  return (\n    <div className={classes.app}>\n      <div className={classes.appHeader}>\n        <p>メルストお祈り計算機</p>\n      </div>\n      <main className={classes.appMain}>\n        <Container className={classes.container}>\n          <timerContext.Provider value={timeCtx}>\n            <Timer />\n          </timerContext.Provider>\n          <myGuildContext.Provider value={myGuildCtx}>\n            <MyGuild />\n          </myGuildContext.Provider>\n          <SummeryText value={summery} />\n          <Grid container spacing={3}>\n            <Grid item xs>\n              <guildContext.Provider value={guildYCtx}>\n                <Guild\n                  name=\"左上(黄)\"\n                  cardStyle={guildStyles.guildY}\n                  minute={timeCtx.timer}\n                  seedList={seed}\n                />\n              </guildContext.Provider>\n            </Grid>\n            <Grid item xs></Grid>\n            <Grid item xs>\n              <guildContext.Provider value={guildRCtx}>\n                <Guild\n                  name=\"右上(赤)\"\n                  cardStyle={guildStyles.guildR}\n                  minute={timeCtx.timer}\n                  seedList={seed}\n                />\n              </guildContext.Provider>\n            </Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs></Grid>\n            <Grid item xs>\n              <guildContext.Provider value={gateCtx}>\n                <Guild\n                  name=\"ゲート(門)\"\n                  cardStyle={guildStyles.gate}\n                  minute={timeCtx.timer}\n                  seedList={seed}\n                />\n              </guildContext.Provider>\n            </Grid>\n            <Grid item xs></Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs>\n              <guildContext.Provider value={guildBCtx}>\n                <Guild\n                  name=\"左下(青)\"\n                  cardStyle={guildStyles.guildB}\n                  minute={timeCtx.timer}\n                  seedList={seed}\n                />\n              </guildContext.Provider>\n            </Grid>\n            <Grid item xs></Grid>\n            <Grid item xs>\n              <guildContext.Provider value={guildGCtx}>\n                <Guild\n                  name=\"右下(緑)\"\n                  cardStyle={guildStyles.guildG}\n                  minute={timeCtx.timer}\n                  seedList={seed}\n                />\n              </guildContext.Provider>\n            </Grid>\n          </Grid>\n        </Container>\n        <span>tw: @twanenko</span>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}