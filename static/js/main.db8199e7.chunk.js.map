{"version":3,"sources":["modules/prayerModule.ts","components/timer.tsx","components/guildpref.tsx","components/guildinfo.tsx","components/guild.tsx","rootReducer.ts","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchSeedList","createAsyncThunk","url","a","fetch","response","json","prayerSlice","createSlice","name","initialState","seeds","seedStatus","timer","myGuildName","guild","title","prayed","modified","reducers","getTimer","state","action","payload","getMyGuildName","updatePrayed","seed","hp","scale","find","g","scaledHp","defaultHp","Math","round","validPrayed","extraReducers","builder","addCase","fulfilled","rejected","actions","useStyles","makeStyles","theme","createStyles","root","fontSize","backgroundColor","color","Timer","classes","dispatch","useDispatch","useState","dateDiff","setDateDiff","useEffect","nowDate","Date","getTime","jsonUrl","floor","random","then","data","st","it","dateNow","setDateNow","timerId","setInterval","moment","format","clearInterval","matched","match","minute","Paper","className","elevation","LabelRadio","StyledRadio","withStyles","radio","checked","props","Radio","FormControlLabel","value","label","control","guildStyles","radioY","yellow","radioR","red","radioB","blue","radioG","green","GuildPref","FormControl","component","FormLabel","style","RadioGroup","row","aria-label","onChange","e","target","padding","text","borderColor","GuildInfo","useSelector","prayer","summery","setSummery","getGuildText","guildName","myGuild","toLocaleString","openTip","setOpenTip","variant","fullWidth","InputLabel","htmlFor","id","margin","type","startAdornment","InputAdornment","position","Tooltip","arrow","open","onClose","disableHoverListener","placement","IconButton","disabled","onClick","waves","Guild","guildStyle","card","spacing","seedList","filterOptions","createFilterOptions","stringify","option","hiragana","replace","chr","charCodeAt","String","fromCharCode","selectedSeed","setSelectedSeed","setHp","setScale","Card","CardContent","Autocomplete","options","getOptionLabel","getOptionSelected","autoSelect","renderInput","params","TextField","Grid","container","item","xs","select","map","MenuItem","key","rootReducer","combineReducers","prayerModule","reducer","store","configureStore","app","appHeader","display","flexDirection","alignItems","justifyContent","appMain","minHeight","flexGrow","guildProps","guildY","brown","guildR","gate","grey","guildB","guildG","App","Container","sm","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db8199e7.chunk.js","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport interface Seed {\n  name: string;\n  link: string;\n  img: string;\n  elem: string;\n  hp: number;\n  interval: number;\n  reach: number;\n  range: number;\n  targets: number;\n  times: number;\n}\n\nexport const fetchSeedList = createAsyncThunk(\n  'prayer/fetchSeed',\n  async (url: string) => {\n    const response = await fetch(url);\n    return (await response.json()) as Seed[];\n  }\n);\n\ninterface GuildState {\n  name: string;\n  title: string;\n  prayed: number;\n  modified: string;\n}\n\ninterface PrayerState {\n  seeds: Seed[] | null;\n  seedStatus: string;\n  timer: string;\n  myGuildName: string;\n  guild: GuildState[];\n}\n\nconst initialState: PrayerState = {\n  seeds: null,\n  seedStatus: 'シード情報を読み込み中',\n  timer: '',\n  myGuildName: '',\n  guild: [\n    { name: 'yellow', title: '左上(黄)', prayed: 0, modified: '' },\n    { name: 'red', title: '右上(赤)', prayed: 0, modified: '' },\n    { name: 'gate', title: 'ゲート(門)', prayed: 0, modified: '' },\n    { name: 'blue', title: '左下(青)', prayed: 0, modified: '' },\n    { name: 'green', title: '右下(緑)', prayed: 0, modified: '' },\n  ],\n};\n\nexport interface Prayed {\n  name: string;\n  seed: Seed | null;\n  hp: number;\n  scale: number;\n}\n\nexport const prayerSlice = createSlice({\n  name: 'prayer',\n  initialState,\n  reducers: {\n    getTimer: (state, action: PayloadAction<string>) => {\n      state.timer = action.payload;\n    },\n    getMyGuildName: (state, action: PayloadAction<string>) => {\n      state.myGuildName = action.payload;\n    },\n    updatePrayed: (state, action: PayloadAction<Prayed>) => {\n      const { name, seed, hp, scale } = action.payload;\n      if (!seed) return;\n      const guild = state.guild.find((g) => g.name === name);\n      if (!guild) return;\n      const scaledHp = hp / scale;\n      const defaultHp = seed.hp;\n      const prayed = Math.round((scaledHp / defaultHp - 1) * 100);\n      const validPrayed = prayed > 0 ? prayed : 0;\n      guild.prayed = validPrayed;\n      guild.modified = `@${state.timer}`;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchSeedList.fulfilled, (state, action) => {\n      state.seeds = action.payload;\n    });\n    builder.addCase(fetchSeedList.rejected, (state, action) => {\n      state.seedStatus = 'シード読み込みに失敗しました';\n    });\n  },\n});\n\nexport const { getTimer, getMyGuildName, updatePrayed } = prayerSlice.actions;\n\nexport default prayerSlice;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport { getTimer } from '../modules/prayerModule';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      fontSize: 'calc(20px + 2vmin)',\n      backgroundColor: '#717c91',\n      color: 'white',\n    },\n  })\n);\n\nconst Timer = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  /**\n   * 端末とサーバーの時刻の差分dateDiff\n   */\n  const [dateDiff, setDateDiff] = useState(0);\n  useEffect(() => {\n    const nowDate = new Date().getTime();\n    // ランダムなどちらかのサーバurl\n    const jsonUrl = [\n      'https://ntp-a1.nict.go.jp/cgi-bin/json',\n      'https://ntp-b1.nict.go.jp/cgi-bin/json',\n    ][Math.floor(Math.random() * 2)];\n    fetch(`${jsonUrl}?${nowDate / 1000}`)\n      .then((response) => response.json())\n      .then((data) => {\n        setDateDiff(data.st * 1000 + (nowDate - data.it * 1000) / 2 - nowDate);\n      });\n  }, []);\n\n  /**\n   * dateDiffをtimeに反映\n   */\n  const [dateNow, setDateNow] = useState('');\n  useEffect(() => {\n    const timerId = setInterval(\n      () =>\n        setDateNow(\n          moment(new Date().getTime() + dateDiff).format('HH時 mm分 ss.SS秒')\n        ),\n      10\n    );\n    return () => clearInterval(timerId);\n  }, [dateDiff]);\n\n  /**\n   * stateに送る\n   */\n  useEffect(() => {\n    const matched = dateNow.match(/\\d{2}分/g);\n    const minute = matched ? matched[0] : '';\n    dispatch(getTimer(minute));\n  }, [dateNow, dispatch]);\n\n  return (\n    <Paper className={classes.root} elevation={5}>\n      <p>現在時刻(JST): {dateNow}</p>\n    </Paper>\n  );\n};\n\nexport default Timer;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { yellow, red, blue, green } from '@material-ui/core/colors';\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { getMyGuildName } from '../modules/prayerModule';\nimport { useDispatch } from 'react-redux';\n\ninterface LabelRadioProps {\n  title: string;\n  name: string;\n  color: {\n    radio: string;\n    checked: string;\n  };\n}\n\n/** フォームラベルにradioをつっこむやつ */\nconst LabelRadio = ({ title, name, color }: LabelRadioProps) => {\n  const StyledRadio = withStyles({\n    root: { color: color.radio, '&$checked': { color: color.checked } },\n    checked: {},\n  })((props: RadioProps) => <Radio {...props} />);\n  return (\n    <FormControlLabel value={name} label={title} control={<StyledRadio />} />\n  );\n};\n\ninterface GuildStyles {\n  [s: string]: LabelRadioProps;\n}\n\nconst guildStyles: GuildStyles = {\n  radioY: {\n    title: '左上(黄)',\n    name: 'yellow',\n    color: { radio: yellow[400], checked: yellow[600] },\n  },\n  radioR: {\n    title: '右上(赤)',\n    name: 'red',\n    color: { radio: red[400], checked: red[600] },\n  },\n  radioB: {\n    title: '左下(青)',\n    name: 'blue',\n    color: { radio: blue[400], checked: blue[600] },\n  },\n  radioG: {\n    title: '右下(緑)',\n    name: 'green',\n    color: { radio: green[400], checked: green[600] },\n  },\n};\n/**\n * FormLabelのところに指定したかったが、onChange時にデフォルトの青色に\n * なってしまうのでstyleで直接指定している\n *\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    label: { color: 'white' },\n  })\n);\n/*\n*/\n\nconst GuildPref = () => {\n  // const classes = useStyles();\n  const dispatch = useDispatch();\n\n  /** 選ばれた値 */\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(getMyGuildName(e.target.value));\n  };\n\n  return (\n    <div>\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" style={{ color: 'white' }}>\n          自分のギルド\n        </FormLabel>\n        <RadioGroup\n          row={true}\n          aria-label=\"my-guild\"\n          name=\"my-guild\"\n          onChange={handleChange}\n        >\n          <LabelRadio {...guildStyles.radioY} />\n          <LabelRadio {...guildStyles.radioR} />\n          <LabelRadio {...guildStyles.radioB} />\n          <LabelRadio {...guildStyles.radioG} />\n        </RadioGroup>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default GuildPref;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/OutlinedInput';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CopyToClipBoard from 'react-copy-to-clipboard';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../rootReducer';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: '0 0 1em',\n    },\n    text: {\n      borderColor: 'white',\n      color: 'white',\n    },\n  })\n);\n\nconst GuildInfo = () => {\n  const classes = useStyles();\n  /** 自分のギルド */\n  const myGuildName = useSelector(\n    (state: RootState) => state.prayer.myGuildName\n  );\n  /** ギルド一覧 */\n  const guild = useSelector((state: RootState) => state.prayer.guild);\n\n  const [summery, setSummery] = useState('');\n  useEffect(() => {\n    const getGuildText = (guildName: string) => {\n      const myGuild = guild.find((g) => g.name === guildName);\n      if (!myGuild) return '';\n      if (myGuildName === guildName) return '';\n      const title = myGuild.title;\n      const prayed = myGuild.prayed.toLocaleString();\n      const modified = myGuild.modified;\n      return `${title}:${prayed}%${modified} `;\n    };\n    setSummery(\n      `${getGuildText('yellow')}${getGuildText('red')}${getGuildText(\n        `gate`\n      )}${getGuildText('blue')}${getGuildText('green')}`\n    );\n  }, [guild, myGuildName]);\n\n  /** コピペボタンのtooltip */\n  const [openTip, setOpenTip] = useState(false);\n  const handleCloseTip = () => {\n    setOpenTip(false);\n  };\n  const handleClickButton = () => {\n    setOpenTip(true);\n  };\n\n  return (\n    <div className={classes.root}>\n      <FormControl variant=\"outlined\" fullWidth={true}>\n        <InputLabel htmlFor=\"summery\" className={classes.text}>\n          コピペ用\n        </InputLabel>\n        <Input\n          className={classes.text}\n          id=\"summery\"\n          margin=\"dense\"\n          type=\"text\"\n          value={summery}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              <Tooltip\n                arrow\n                open={openTip}\n                onClose={handleCloseTip}\n                disableHoverListener\n                placement=\"top\"\n                title=\"copied\"\n              >\n                <CopyToClipBoard text={summery}>\n                  <IconButton\n                    disabled={summery === ''}\n                    onClick={handleClickButton}\n                  >\n                    <AssignmentIcon className={classes.text} />\n                  </IconButton>\n                </CopyToClipBoard>\n              </Tooltip>\n            </InputAdornment>\n          }\n        />\n      </FormControl>\n    </div>\n  );\n};\n\nexport default GuildInfo;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Autocomplete, {\n  createFilterOptions,\n} from '@material-ui/lab/Autocomplete';\nimport { Seed, updatePrayed } from '../modules/prayerModule';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../rootReducer';\n\n/**\n * waveの選択肢\n * @param value 倍率\n */\nconst waves = [\n  { value: '1', label: '1体目' },\n  { value: '1.2', label: '2体目' },\n  { value: '1.4', label: '3体目' },\n  { value: '1.6', label: '4体目' },\n  { value: '1.8', label: '5体目' },\n];\n\ninterface GuildStyle {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface GuildProps {\n  name: string;\n  guildStyle: GuildStyle;\n}\n\nconst Guild = ({ name, guildStyle }: GuildProps) => {\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      card: {\n        backgroundColor: guildStyle.backgroundColor,\n        color: guildStyle.color,\n        padding: theme.spacing(2),\n      },\n    })\n  );\n  /** cssの設定 */\n  const classes = useStyles();\n\n  /** state */\n  const seedList = useSelector((state: RootState) => state.prayer.seeds);\n  const myGuild = useSelector((state: RootState) =>\n    state.prayer.guild.find((g) => g.name === name)\n  );\n  const dispatch = useDispatch();\n\n  /**\n   * autocompleteで、平仮名でも検索にかかるようにする\n   */\n  const filterOptions = createFilterOptions({\n    stringify: (option: Seed) => {\n      const hiragana = option.name.replace(/[\\u30a1-\\u30f6]/g, (match) => {\n        const chr = match.charCodeAt(0) - 0x60;\n        return String.fromCharCode(chr);\n      });\n      return `${option.name}_${hiragana}`;\n    },\n  });\n\n  /** 選択されたシード */\n  const [selectedSeed, setSelectedSeed] = useState<Seed | null>(null);\n  /** 入力された体力 */\n  const [hp, setHp] = useState(0);\n  /** シードのwave数 */\n  const [scale, setScale] = useState(1);\n\n  /** シード選択 */\n  const handleSeedChange = (e: React.ChangeEvent<{}>, value: Seed | null) => {\n    setSelectedSeed(value);\n  };\n  /** 体力入力 */\n  const handleHpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setHp(+e.target.value);\n  };\n  /** wave選択 */\n  const handleWaveChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setScale(+e.target.value);\n  };\n\n  useEffect(() => {\n    dispatch(updatePrayed({ name, seed: selectedSeed, hp, scale }));\n  }, [dispatch, hp, name, scale, selectedSeed]);\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        {myGuild?.title}: {myGuild?.prayed.toLocaleString()}%{myGuild?.modified}\n        {seedList ? (\n          <Autocomplete\n            options={seedList}\n            getOptionLabel={(option) => option.name}\n            getOptionSelected={(option, value) => option.name === value.name}\n            filterOptions={filterOptions}\n            autoSelect={true}\n            onChange={handleSeedChange}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"シード名\"\n                variant=\"outlined\"\n                margin=\"dense\"\n              />\n            )}\n          />\n        ) : (\n          <div>\n            <p>シード情報を読み込み中</p>\n          </div>\n        )}\n        <Grid container spacing={2}>\n          <Grid item xs>\n            <TextField\n              label=\"シード体力\"\n              onChange={handleHpChange}\n              fullWidth={true}\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              select\n              variant=\"outlined\"\n              margin=\"dense\"\n              fullWidth\n              label=\"Wave\"\n              value={scale.toLocaleString()}\n              onChange={handleWaveChange}\n            >\n              {waves.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Guild;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport prayerModule from './modules/prayerModule';\n\nconst rootReducer = combineReducers({\n  prayer: prayerModule.reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default store;\n","import React, { useEffect } from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport {\n  yellow,\n  brown,\n  red,\n  grey,\n  blue,\n  green,\n} from '@material-ui/core/colors';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Timer from './components/timer';\nimport GuildPref from './components/guildpref';\nimport GuildInfo from './components/guildinfo';\nimport Guild, { GuildProps } from './components/guild';\nimport { useAppDispatch } from './store';\nimport { fetchSeedList } from './modules/prayerModule';\n\n/** App大枠のcss */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    app: {\n      backgroundColor: '#282c34',\n      color: 'white',\n    },\n    appHeader: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: 'calc(10px + 2vmin)',\n    },\n    appMain: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '100vh',\n      fontSize: 'calc(10px + 2vmin)',\n    },\n    container: { flexGrow: 1 },\n  })\n);\n\n/** 各ギルドの初期表示設定 */\ntype GuildKeys = 'guildY' | 'guildR' | 'gate' | 'guildB' | 'guildG';\ntype GuildPref = {\n  [K in GuildKeys]: GuildProps;\n};\n/** 各ギルドの初期設定 */\nconst guildProps: GuildPref = {\n  guildY: {\n    name: 'yellow',\n    guildStyle: {\n      backgroundColor: yellow[100],\n      color: brown[600],\n    },\n  },\n  guildR: {\n    name: 'red',\n    guildStyle: {\n      backgroundColor: red[100],\n      color: red[900],\n    },\n  },\n  gate: {\n    name: 'gate',\n    guildStyle: {\n      backgroundColor: grey[200],\n      color: grey[900],\n    },\n  },\n  guildB: {\n    name: 'blue',\n    guildStyle: {\n      backgroundColor: blue[100],\n      color: blue[900],\n    },\n  },\n  guildG: {\n    name: 'green',\n    guildStyle: {\n      backgroundColor: green[100],\n      color: green[900],\n    },\n  },\n};\n\nconst App = () => {\n  const classes = useStyles();\n  /**\n   * シード情報を取得、stateに反映させる\n   * とりあえずここでやっている\n   */\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(\n      fetchSeedList(\n        'https://script.google.com/macros/s/AKfycbyt5WB_eEoamADwxePfKQxk3umq5khBbCeaIdRnLOTCeVHzkj0/exec'\n      )\n    );\n  }, [dispatch]);\n\n  return (\n    <div className={classes.app}>\n      <div className={classes.appHeader}>\n        <p>メルストお祈り計算機</p>\n      </div>\n      <main className={classes.appMain}>\n        <Container className={classes.container}>\n          <Timer />\n          <GuildPref />\n          <GuildInfo />\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={5}>\n              <Guild {...guildProps.guildY} />\n            </Grid>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid item xs={12} sm={5}>\n              <Guild {...guildProps.guildR} />\n            </Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs={false} sm={3}></Grid>\n            <Grid item xs={12} sm={6}>\n              <Guild {...guildProps.gate} />\n            </Grid>\n            <Grid item xs={false} sm={3}></Grid>\n          </Grid>\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={5}>\n              <Guild {...guildProps.guildB} />\n            </Grid>\n            <Grid item xs={false} sm={2}></Grid>\n            <Grid item xs={12} sm={5}>\n              <Guild {...guildProps.guildG} />\n            </Grid>\n          </Grid>\n        </Container>\n        <span>tw: @twanenko</span>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}